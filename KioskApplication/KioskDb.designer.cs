#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace KioskApplication
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IstanbulUniversityKiosk")]
	public partial class KioskDbDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAcademicianBuilding(AcademicianBuilding instance);
    partial void UpdateAcademicianBuilding(AcademicianBuilding instance);
    partial void DeleteAcademicianBuilding(AcademicianBuilding instance);
    partial void InsertAcademicianClass(AcademicianClass instance);
    partial void UpdateAcademicianClass(AcademicianClass instance);
    partial void DeleteAcademicianClass(AcademicianClass instance);
    partial void InsertBuilding(Building instance);
    partial void UpdateBuilding(Building instance);
    partial void DeleteBuilding(Building instance);
    partial void InsertClass(Class instance);
    partial void UpdateClass(Class instance);
    partial void DeleteClass(Class instance);
    partial void InsertClassBuilding(ClassBuilding instance);
    partial void UpdateClassBuilding(ClassBuilding instance);
    partial void DeleteClassBuilding(ClassBuilding instance);
    partial void InsertEngineering(Engineering instance);
    partial void UpdateEngineering(Engineering instance);
    partial void DeleteEngineering(Engineering instance);
    partial void InsertEngineeringBuilding(EngineeringBuilding instance);
    partial void UpdateEngineeringBuilding(EngineeringBuilding instance);
    partial void DeleteEngineeringBuilding(EngineeringBuilding instance);
    partial void InsertEngineeringClass(EngineeringClass instance);
    partial void UpdateEngineeringClass(EngineeringClass instance);
    partial void DeleteEngineeringClass(EngineeringClass instance);
    #endregion
		
		public KioskDbDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["IstanbulUniversityKioskConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public KioskDbDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KioskDbDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KioskDbDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public KioskDbDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AcademicianBuilding> AcademicianBuildings
		{
			get
			{
				return this.GetTable<AcademicianBuilding>();
			}
		}
		
		public System.Data.Linq.Table<AcademicianClass> AcademicianClasses
		{
			get
			{
				return this.GetTable<AcademicianClass>();
			}
		}
		
		public System.Data.Linq.Table<Building> Buildings
		{
			get
			{
				return this.GetTable<Building>();
			}
		}
		
		public System.Data.Linq.Table<Class> Classes
		{
			get
			{
				return this.GetTable<Class>();
			}
		}
		
		public System.Data.Linq.Table<ClassBuilding> ClassBuildings
		{
			get
			{
				return this.GetTable<ClassBuilding>();
			}
		}
		
		public System.Data.Linq.Table<Engineering> Engineerings
		{
			get
			{
				return this.GetTable<Engineering>();
			}
		}
		
		public System.Data.Linq.Table<EngineeringBuilding> EngineeringBuildings
		{
			get
			{
				return this.GetTable<EngineeringBuilding>();
			}
		}
		
		public System.Data.Linq.Table<EngineeringClass> EngineeringClasses
		{
			get
			{
				return this.GetTable<EngineeringClass>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcademicianBuilding")]
	public partial class AcademicianBuilding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AcademicianClassId;
		
		private int _BuildingId;
		
		private EntityRef<Building> _Building;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcademicianClassIdChanging(int value);
    partial void OnAcademicianClassIdChanged();
    partial void OnBuildingIdChanging(int value);
    partial void OnBuildingIdChanged();
    #endregion
		
		public AcademicianBuilding()
		{
			this._Building = default(EntityRef<Building>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicianClassId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AcademicianClassId
		{
			get
			{
				return this._AcademicianClassId;
			}
			set
			{
				if ((this._AcademicianClassId != value))
				{
					this.OnAcademicianClassIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicianClassId = value;
					this.SendPropertyChanged("AcademicianClassId");
					this.OnAcademicianClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BuildingId
		{
			get
			{
				return this._BuildingId;
			}
			set
			{
				if ((this._BuildingId != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingIdChanging(value);
					this.SendPropertyChanging();
					this._BuildingId = value;
					this.SendPropertyChanged("BuildingId");
					this.OnBuildingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_AcademicianBuilding", Storage="_Building", ThisKey="BuildingId", OtherKey="BuildingId", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.AcademicianBuildings.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.AcademicianBuildings.Add(this);
						this._BuildingId = value.BuildingId;
					}
					else
					{
						this._BuildingId = default(int);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AcademicianClass")]
	public partial class AcademicianClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AcademicianName;
		
		private System.Nullable<int> _EngineeringId;
		
		private System.Nullable<int> _BuildingLevel;
		
		private int _AcademicianClassId;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAcademicianNameChanging(string value);
    partial void OnAcademicianNameChanged();
    partial void OnEngineeringIdChanging(System.Nullable<int> value);
    partial void OnEngineeringIdChanged();
    partial void OnBuildingLevelChanging(System.Nullable<int> value);
    partial void OnBuildingLevelChanged();
    partial void OnAcademicianClassIdChanging(int value);
    partial void OnAcademicianClassIdChanged();
    #endregion
		
		public AcademicianClass()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicianName", DbType="NVarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AcademicianName
		{
			get
			{
				return this._AcademicianName;
			}
			set
			{
				if ((this._AcademicianName != value))
				{
					this.OnAcademicianNameChanging(value);
					this.SendPropertyChanging();
					this._AcademicianName = value;
					this.SendPropertyChanged("AcademicianName");
					this.OnAcademicianNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineeringId", DbType="Int")]
		public System.Nullable<int> EngineeringId
		{
			get
			{
				return this._EngineeringId;
			}
			set
			{
				if ((this._EngineeringId != value))
				{
					this.OnEngineeringIdChanging(value);
					this.SendPropertyChanging();
					this._EngineeringId = value;
					this.SendPropertyChanged("EngineeringId");
					this.OnEngineeringIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingLevel", DbType="Int")]
		public System.Nullable<int> BuildingLevel
		{
			get
			{
				return this._BuildingLevel;
			}
			set
			{
				if ((this._BuildingLevel != value))
				{
					this.OnBuildingLevelChanging(value);
					this.SendPropertyChanging();
					this._BuildingLevel = value;
					this.SendPropertyChanged("BuildingLevel");
					this.OnBuildingLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AcademicianClassId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AcademicianClassId
		{
			get
			{
				return this._AcademicianClassId;
			}
			set
			{
				if ((this._AcademicianClassId != value))
				{
					this.OnAcademicianClassIdChanging(value);
					this.SendPropertyChanging();
					this._AcademicianClassId = value;
					this.SendPropertyChanged("AcademicianClassId");
					this.OnAcademicianClassIdChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Building")]
	public partial class Building : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _BuildingId;
		
		private string _BuildingName;
		
		private int _BuildingLevelCount;
		
		private EntitySet<AcademicianBuilding> _AcademicianBuildings;
		
		private EntitySet<ClassBuilding> _ClassBuildings;
		
		private EntitySet<EngineeringBuilding> _EngineeringBuildings;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBuildingIdChanging(int value);
    partial void OnBuildingIdChanged();
    partial void OnBuildingNameChanging(string value);
    partial void OnBuildingNameChanged();
    partial void OnBuildingLevelCountChanging(int value);
    partial void OnBuildingLevelCountChanged();
    #endregion
		
		public Building()
		{
			this._AcademicianBuildings = new EntitySet<AcademicianBuilding>(new Action<AcademicianBuilding>(this.attach_AcademicianBuildings), new Action<AcademicianBuilding>(this.detach_AcademicianBuildings));
			this._ClassBuildings = new EntitySet<ClassBuilding>(new Action<ClassBuilding>(this.attach_ClassBuildings), new Action<ClassBuilding>(this.detach_ClassBuildings));
			this._EngineeringBuildings = new EntitySet<EngineeringBuilding>(new Action<EngineeringBuilding>(this.attach_EngineeringBuildings), new Action<EngineeringBuilding>(this.detach_EngineeringBuildings));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int BuildingId
		{
			get
			{
				return this._BuildingId;
			}
			set
			{
				if ((this._BuildingId != value))
				{
					this.OnBuildingIdChanging(value);
					this.SendPropertyChanging();
					this._BuildingId = value;
					this.SendPropertyChanged("BuildingId");
					this.OnBuildingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string BuildingName
		{
			get
			{
				return this._BuildingName;
			}
			set
			{
				if ((this._BuildingName != value))
				{
					this.OnBuildingNameChanging(value);
					this.SendPropertyChanging();
					this._BuildingName = value;
					this.SendPropertyChanged("BuildingName");
					this.OnBuildingNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingLevelCount", DbType="Int NOT NULL")]
		public int BuildingLevelCount
		{
			get
			{
				return this._BuildingLevelCount;
			}
			set
			{
				if ((this._BuildingLevelCount != value))
				{
					this.OnBuildingLevelCountChanging(value);
					this.SendPropertyChanging();
					this._BuildingLevelCount = value;
					this.SendPropertyChanged("BuildingLevelCount");
					this.OnBuildingLevelCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_AcademicianBuilding", Storage="_AcademicianBuildings", ThisKey="BuildingId", OtherKey="BuildingId")]
		public EntitySet<AcademicianBuilding> AcademicianBuildings
		{
			get
			{
				return this._AcademicianBuildings;
			}
			set
			{
				this._AcademicianBuildings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_ClassBuilding", Storage="_ClassBuildings", ThisKey="BuildingId", OtherKey="BuildingId")]
		public EntitySet<ClassBuilding> ClassBuildings
		{
			get
			{
				return this._ClassBuildings;
			}
			set
			{
				this._ClassBuildings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_EngineeringBuilding", Storage="_EngineeringBuildings", ThisKey="BuildingId", OtherKey="BuildingId")]
		public EntitySet<EngineeringBuilding> EngineeringBuildings
		{
			get
			{
				return this._EngineeringBuildings;
			}
			set
			{
				this._EngineeringBuildings.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AcademicianBuildings(AcademicianBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_AcademicianBuildings(AcademicianBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
		
		private void attach_ClassBuildings(ClassBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_ClassBuildings(ClassBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
		
		private void attach_EngineeringBuildings(EngineeringBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Building = this;
		}
		
		private void detach_EngineeringBuildings(EngineeringBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Building = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Class")]
	public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private string _ClassName;
		
		private int _ClassBuildingLevel;
		
		private System.Nullable<int> _ClassLimit;
		
		private EntitySet<ClassBuilding> _ClassBuildings;
		
		private EntitySet<EngineeringClass> _EngineeringClasses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnClassBuildingLevelChanging(int value);
    partial void OnClassBuildingLevelChanged();
    partial void OnClassLimitChanging(System.Nullable<int> value);
    partial void OnClassLimitChanged();
    #endregion
		
		public Class()
		{
			this._ClassBuildings = new EntitySet<ClassBuilding>(new Action<ClassBuilding>(this.attach_ClassBuildings), new Action<ClassBuilding>(this.detach_ClassBuildings));
			this._EngineeringClasses = new EntitySet<EngineeringClass>(new Action<EngineeringClass>(this.attach_EngineeringClasses), new Action<EngineeringClass>(this.detach_EngineeringClasses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string ClassName
		{
			get
			{
				return this._ClassName;
			}
			set
			{
				if ((this._ClassName != value))
				{
					this.OnClassNameChanging(value);
					this.SendPropertyChanging();
					this._ClassName = value;
					this.SendPropertyChanged("ClassName");
					this.OnClassNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassBuildingLevel", DbType="Int NOT NULL")]
		public int ClassBuildingLevel
		{
			get
			{
				return this._ClassBuildingLevel;
			}
			set
			{
				if ((this._ClassBuildingLevel != value))
				{
					this.OnClassBuildingLevelChanging(value);
					this.SendPropertyChanging();
					this._ClassBuildingLevel = value;
					this.SendPropertyChanged("ClassBuildingLevel");
					this.OnClassBuildingLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassLimit", DbType="Int")]
		public System.Nullable<int> ClassLimit
		{
			get
			{
				return this._ClassLimit;
			}
			set
			{
				if ((this._ClassLimit != value))
				{
					this.OnClassLimitChanging(value);
					this.SendPropertyChanging();
					this._ClassLimit = value;
					this.SendPropertyChanged("ClassLimit");
					this.OnClassLimitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassBuilding", Storage="_ClassBuildings", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<ClassBuilding> ClassBuildings
		{
			get
			{
				return this._ClassBuildings;
			}
			set
			{
				this._ClassBuildings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_EngineeringClass", Storage="_EngineeringClasses", ThisKey="ClassId", OtherKey="ClassId")]
		public EntitySet<EngineeringClass> EngineeringClasses
		{
			get
			{
				return this._EngineeringClasses;
			}
			set
			{
				this._EngineeringClasses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ClassBuildings(ClassBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_ClassBuildings(ClassBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
		
		private void attach_EngineeringClasses(EngineeringClass entity)
		{
			this.SendPropertyChanging();
			entity.Class = this;
		}
		
		private void detach_EngineeringClasses(EngineeringClass entity)
		{
			this.SendPropertyChanging();
			entity.Class = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassBuilding")]
	public partial class ClassBuilding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClassId;
		
		private int _BuildingId;
		
		private EntityRef<Building> _Building;
		
		private EntityRef<Class> _Class;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    partial void OnBuildingIdChanging(int value);
    partial void OnBuildingIdChanged();
    #endregion
		
		public ClassBuilding()
		{
			this._Building = default(EntityRef<Building>);
			this._Class = default(EntityRef<Class>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BuildingId
		{
			get
			{
				return this._BuildingId;
			}
			set
			{
				if ((this._BuildingId != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingIdChanging(value);
					this.SendPropertyChanging();
					this._BuildingId = value;
					this.SendPropertyChanged("BuildingId");
					this.OnBuildingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_ClassBuilding", Storage="_Building", ThisKey="BuildingId", OtherKey="BuildingId", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.ClassBuildings.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.ClassBuildings.Add(this);
						this._BuildingId = value.BuildingId;
					}
					else
					{
						this._BuildingId = default(int);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassBuilding", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.ClassBuildings.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.ClassBuildings.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Engineering")]
	public partial class Engineering : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineeringId;
		
		private string _EngineeringName;
		
		private EntitySet<EngineeringBuilding> _EngineeringBuildings;
		
		private EntitySet<EngineeringClass> _EngineeringClasses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineeringIdChanging(int value);
    partial void OnEngineeringIdChanged();
    partial void OnEngineeringNameChanging(string value);
    partial void OnEngineeringNameChanged();
    #endregion
		
		public Engineering()
		{
			this._EngineeringBuildings = new EntitySet<EngineeringBuilding>(new Action<EngineeringBuilding>(this.attach_EngineeringBuildings), new Action<EngineeringBuilding>(this.detach_EngineeringBuildings));
			this._EngineeringClasses = new EntitySet<EngineeringClass>(new Action<EngineeringClass>(this.attach_EngineeringClasses), new Action<EngineeringClass>(this.detach_EngineeringClasses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineeringId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EngineeringId
		{
			get
			{
				return this._EngineeringId;
			}
			set
			{
				if ((this._EngineeringId != value))
				{
					this.OnEngineeringIdChanging(value);
					this.SendPropertyChanging();
					this._EngineeringId = value;
					this.SendPropertyChanged("EngineeringId");
					this.OnEngineeringIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineeringName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string EngineeringName
		{
			get
			{
				return this._EngineeringName;
			}
			set
			{
				if ((this._EngineeringName != value))
				{
					this.OnEngineeringNameChanging(value);
					this.SendPropertyChanging();
					this._EngineeringName = value;
					this.SendPropertyChanged("EngineeringName");
					this.OnEngineeringNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Engineering_EngineeringBuilding", Storage="_EngineeringBuildings", ThisKey="EngineeringId", OtherKey="EngineeringId")]
		public EntitySet<EngineeringBuilding> EngineeringBuildings
		{
			get
			{
				return this._EngineeringBuildings;
			}
			set
			{
				this._EngineeringBuildings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Engineering_EngineeringClass", Storage="_EngineeringClasses", ThisKey="EngineeringId", OtherKey="EngineeringId")]
		public EntitySet<EngineeringClass> EngineeringClasses
		{
			get
			{
				return this._EngineeringClasses;
			}
			set
			{
				this._EngineeringClasses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EngineeringBuildings(EngineeringBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Engineering = this;
		}
		
		private void detach_EngineeringBuildings(EngineeringBuilding entity)
		{
			this.SendPropertyChanging();
			entity.Engineering = null;
		}
		
		private void attach_EngineeringClasses(EngineeringClass entity)
		{
			this.SendPropertyChanging();
			entity.Engineering = this;
		}
		
		private void detach_EngineeringClasses(EngineeringClass entity)
		{
			this.SendPropertyChanging();
			entity.Engineering = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineeringBuilding")]
	public partial class EngineeringBuilding : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineeringId;
		
		private int _BuildingId;
		
		private EntityRef<Building> _Building;
		
		private EntityRef<Engineering> _Engineering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineeringIdChanging(int value);
    partial void OnEngineeringIdChanged();
    partial void OnBuildingIdChanging(int value);
    partial void OnBuildingIdChanged();
    #endregion
		
		public EngineeringBuilding()
		{
			this._Building = default(EntityRef<Building>);
			this._Engineering = default(EntityRef<Engineering>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineeringId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineeringId
		{
			get
			{
				return this._EngineeringId;
			}
			set
			{
				if ((this._EngineeringId != value))
				{
					if (this._Engineering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineeringIdChanging(value);
					this.SendPropertyChanging();
					this._EngineeringId = value;
					this.SendPropertyChanged("EngineeringId");
					this.OnEngineeringIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuildingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int BuildingId
		{
			get
			{
				return this._BuildingId;
			}
			set
			{
				if ((this._BuildingId != value))
				{
					if (this._Building.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBuildingIdChanging(value);
					this.SendPropertyChanging();
					this._BuildingId = value;
					this.SendPropertyChanged("BuildingId");
					this.OnBuildingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Building_EngineeringBuilding", Storage="_Building", ThisKey="BuildingId", OtherKey="BuildingId", IsForeignKey=true)]
		public Building Building
		{
			get
			{
				return this._Building.Entity;
			}
			set
			{
				Building previousValue = this._Building.Entity;
				if (((previousValue != value) 
							|| (this._Building.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Building.Entity = null;
						previousValue.EngineeringBuildings.Remove(this);
					}
					this._Building.Entity = value;
					if ((value != null))
					{
						value.EngineeringBuildings.Add(this);
						this._BuildingId = value.BuildingId;
					}
					else
					{
						this._BuildingId = default(int);
					}
					this.SendPropertyChanged("Building");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Engineering_EngineeringBuilding", Storage="_Engineering", ThisKey="EngineeringId", OtherKey="EngineeringId", IsForeignKey=true)]
		public Engineering Engineering
		{
			get
			{
				return this._Engineering.Entity;
			}
			set
			{
				Engineering previousValue = this._Engineering.Entity;
				if (((previousValue != value) 
							|| (this._Engineering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Engineering.Entity = null;
						previousValue.EngineeringBuildings.Remove(this);
					}
					this._Engineering.Entity = value;
					if ((value != null))
					{
						value.EngineeringBuildings.Add(this);
						this._EngineeringId = value.EngineeringId;
					}
					else
					{
						this._EngineeringId = default(int);
					}
					this.SendPropertyChanged("Engineering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EngineeringClass")]
	public partial class EngineeringClass : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EngineeringId;
		
		private int _ClassId;
		
		private EntityRef<Class> _Class;
		
		private EntityRef<Engineering> _Engineering;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEngineeringIdChanging(int value);
    partial void OnEngineeringIdChanged();
    partial void OnClassIdChanging(int value);
    partial void OnClassIdChanged();
    #endregion
		
		public EngineeringClass()
		{
			this._Class = default(EntityRef<Class>);
			this._Engineering = default(EntityRef<Engineering>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineeringId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EngineeringId
		{
			get
			{
				return this._EngineeringId;
			}
			set
			{
				if ((this._EngineeringId != value))
				{
					if (this._Engineering.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEngineeringIdChanging(value);
					this.SendPropertyChanging();
					this._EngineeringId = value;
					this.SendPropertyChanged("EngineeringId");
					this.OnEngineeringIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClassId
		{
			get
			{
				return this._ClassId;
			}
			set
			{
				if ((this._ClassId != value))
				{
					if (this._Class.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClassIdChanging(value);
					this.SendPropertyChanging();
					this._ClassId = value;
					this.SendPropertyChanged("ClassId");
					this.OnClassIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_EngineeringClass", Storage="_Class", ThisKey="ClassId", OtherKey="ClassId", IsForeignKey=true)]
		public Class Class
		{
			get
			{
				return this._Class.Entity;
			}
			set
			{
				Class previousValue = this._Class.Entity;
				if (((previousValue != value) 
							|| (this._Class.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Class.Entity = null;
						previousValue.EngineeringClasses.Remove(this);
					}
					this._Class.Entity = value;
					if ((value != null))
					{
						value.EngineeringClasses.Add(this);
						this._ClassId = value.ClassId;
					}
					else
					{
						this._ClassId = default(int);
					}
					this.SendPropertyChanged("Class");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Engineering_EngineeringClass", Storage="_Engineering", ThisKey="EngineeringId", OtherKey="EngineeringId", IsForeignKey=true)]
		public Engineering Engineering
		{
			get
			{
				return this._Engineering.Entity;
			}
			set
			{
				Engineering previousValue = this._Engineering.Entity;
				if (((previousValue != value) 
							|| (this._Engineering.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Engineering.Entity = null;
						previousValue.EngineeringClasses.Remove(this);
					}
					this._Engineering.Entity = value;
					if ((value != null))
					{
						value.EngineeringClasses.Add(this);
						this._EngineeringId = value.EngineeringId;
					}
					else
					{
						this._EngineeringId = default(int);
					}
					this.SendPropertyChanged("Engineering");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
